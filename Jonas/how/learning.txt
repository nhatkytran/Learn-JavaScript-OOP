+++ JavaScript +++

--> JavaScript is a high-level, object-oriented, multi-paradigm programming language

--> A multi-paradigm programming language is a language that supports multiple programming \
paradigms or styles. Programming paradigms refer to the different approaches to writing \
software programs
--> For example, some programming paradigms are:

+ Procedural: focuses on writing a sequence of procedures or functions that perform specific tasks
+ Object-oriented: focuses on creating and manipulating objects that contain data and behavior
+ Functional: focuses on writing functions that take inputs and produce outputs without modifying \
any data outside the function
+ Declarative: focuses on specifying what the program should do, rather than how to do it

--> A multi-paradigm programming language combines two or more of these programming paradigms, often \
allowing developers to choose the most appropriate approach for a specific task or problem
--> JavaScript is an example of a multi-paradigm programming language. It supports object-oriented \
programming, functional programming, and even some declarative paradigms, among others. This flexibility \
and versatility make it a popular choice for a wide range of web development and software engineering applications

--> In summary, we can say that JavaScript is multi-paradigm programming language: OOP, Functional, Declarative

--> Declarative v/s Imperative? Such as Fetching API

--> More about Functional Programming
--> Programming paradigm
+ Funtions are first-class citizens --> passed as arguments, can be returned from function, stored in variable
+ Pure function --> Don't mutate data, same input same output
+ Emphasizes declarative programming

--> Every thing in JS is an object --> Prototype-based Object-Oriented Programming --> Object Constructor and its prototype

--> Primitive Types --> There are 6 Primitive Types --> undefined, null, number, string, boolean, symbol
--> Actually called "Primitive" because they are not object and do not have any properties or methods
--> Why 'string'.toLowerCase()?
--> We can use properties and methods with Primitive values because JavaScript provides object wrappers for each \
Primitive types (Number, String, Boolean)
--> 123.__proto__ --> SyntaxError
--> Number(123).__proto__
--> Passed by value --> when a value is assigned to a variable, a copy of the value is created, instead of just a reference \
to the original value

--> Perference Types --> Object (Regular Object), Array, Function,...
--> Pass by reference

+++ 10 characteristics of JavaScript +++

--> Henry Goes Into the Market Just Preparing his New First Dish Salad

+ High Level
- Any program needs resources such as memory
- C (Low-Level) --> Developer has to manage resources manually
- JS, Python (High-Level) --> Everything happens automatically --> Abstraction

+ Garbage Collected
- An algorithm in JS engine --> Clean the memory

+ Interpreted
- Run code line by line and convert code to machine code

--> When JS deal with a big For Loop, the counter exceeds a certain threshold, the engine determines that the loop \
is a "hot loop" and would benefit from Just-In-Time compilation

+ Multi-paradigm --> Paradigm --> An approach and mindset of structuring code, which will direct coding style and technique
- Procedural Programming --> Organizing the code in a very linear way, and then with some funcitons in between
- Object-Oriented Programming -->
- Functional Programming -->
--> We can classify paradigm as Imperative or as Declarative

+ Just-in-time Compiled
- JavaScript is indeed Just-In-Time (JIT) compiled. This means that the JavaScript code is not compiled ahead of time, \
but rather compiled just before it is executed. The JavaScript engine takes the source code and converts it into machine code, \
which can then be run by the CPU. JIT compilation has the advantage of allowing for faster code execution because it can optimize \
the machine code based on the specific runtime environment and current execution context.

+ Prototype-based Object-Oriented
- Every thing in JS is an object except for Primitive values
--> Why we can create an array and use push method on it --> It's because of Prototypal Inheritance

+ First-class Funciton
- Functions are treated like any other variable
- A function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable.

+ Dynamic --> Dynamically-typed
- No data type definitions. Types becomes known at runtime
- Data type of variable is automatically changed

+ Single-threaded --> JS is single-threaded itself, but its environment is not --> Web APIs environment
- Concurrency model --> how the JS engine handles multiple tasks happening at the same time
--> Why do we need Concurrency model? --> JS runs in one single threaded, so it can only do one thing at a time
- A thread is like a set of instructions that is executed in the computer's CPU
--> What about a long-running task? --> Block the single thread --> Need non-blocking behavior

+ Non-blocking Event Loop Concurrency Model
- Event Loop: takes long running tasks, executes them in the "background", and puts them back in the main thread \
once they are finished


+++ What is a JavaScript Engine? +++

--> JS Engine --> Program that executes JS code
--> JS Engine --> Call Stack + Heap
+ Call Stack --> Execution Context --> Where code is executed
+ Heap --> Where objects are stored - Object in memory

+++ Computer Science Sidenote: Compilation v/s Interpretation +++

--> Compilation --> Entire code is converted into machine code at once, and written \
to a binary file that can be executed by a computer

--> Source code
+ Step 1: Compilation
--> Portable file: Machine code
+ Step 2: Execution --> Can happend way after compilation
--> Program running

--> Portable file are designed to be platform-independent, which means they can be \
opened and viewed on different operating systems or devices without requiring any \
specific software or program

--> Interpretation --> Interpreter runs through the source code and executes it \
line by line

--> Source code
+ Step 1: Execution line by line --> Code still needs to be converted to machine code
--> Program running

--> Just-in-time (JIT) compilation: Entire code is converted into machine code \
at once, the executed immediately

--> Source code
+ Step 1: Compilation
-->Machine code --> Not Portable file
+ Step 2: Execution --> Happens immediately
--> Program running

*** Point to note
--> Compile --> Convert --> Bien dich
--> Interpret --> Translate --> Phien dich

+++ The bigger picture: JavaScript Runtime +++

+++ JavaScript and V8 Engine +++

--> Parser: Break dow the code into tokens --> Create Abstract Syntax Tree
--> Compilation: Eingine takes AST --> Bytecode
--> Interpreter - Inginition: Run Bytecode
--> Compiler - Turbor fan: Optimize the code

--> Byte code: Flexibility like Monkey patching, not take lot of memory
--> Machine code: No flexibility and ISA - Instruction Set Architecture

+++ Execution Contexts and The Call Stack +++

--> Execution Context --> Environment in which a piece of JavaScript is executed. \
Stores all the necessary information for some code to be executed

--> Compilation
--> Creation of Global Execution Context (for top-level code)
--> Execution of top-level code (inside global EC)
--> Execution of functions and waiting for callbacks

--> Exactly one global execution (EC): Default context, created for code that is \
not inside any function (top-level)
--> One execution context per function: For each function call, a new execution \
context is created

+++ Execution Context in Detail +++

--> Creation phase
--> Only functions create Execution contexts, not block scope

--> What's inside Exetion Context?

1. Variable Environment
+ let, const and var declarations
+ Functions
+ Arguments object
2. Scope chain
3. this keyword

--> Arrow function use this keyword and arguments of the closest regular function parent

+++ Scope and The Scope Chain +++

--> Scoping: How our program's variables are organized and accessed. "Where do \
variables live?" or "Where can we access a certain variable, and where not"
--> Lexical scoping: Scoping is controlled by placement of functions and blocks \
in the code
--> Scope (Global scope, Function scope, Block scope): Space or environment in which \
a certain variable is declared (variable environment in case of functions). There is \
gloabl scope, function scope, block scope
--> Scope of a variable: Region of our code where a certain variable can be accessed

*** Point to note

--> Execution Context has 2 phases
+ Creation phase
+ Execution phase (Initialization phase)
